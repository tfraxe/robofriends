{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/RobotForm.js","components/robots.js","containers/App.js","components/serviceWorker.js","index.js"],"names":["Card","name","email","username","id","className","alt","src","CardList","cardComponent","robots","map","robot","index","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","RobotForm","handleChangeName","event","setState","inputFormName","target","value","handleChangeUsername","inputFormUsername","handleChangeEmail","inputFormEmail","state","onSubmit","this","required","Component","App","onSearchChange","handleSubmit","new_robot","console","log","concat","preventDefault","robosFiltrados","filter","elem","toLowerCase","includes","length","fetch","then","response","json","users","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.418d48b6.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, username, id}) => {\n\n\treturn (\n\n\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt='A robot' src={`https://robohash.org/${username + 'robot'}?200x200`} />\n\t\t<div>\n\t\t\t<h2> {name} </h2>\n\t\t\t<p> {email} </p>\n\t\t</div>\n\t</div>\n\n\n\t);\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nconst CardList = ( { robots } ) => {\n\n\tconst cardComponent = robots.map( (robot, index) => <Card key = {index} id={index} name={robot.name} username={robot.username} email={robot.email}/>)\n\n\treturn (\n\t\t<div>\n\t\t\t{ cardComponent }\n\t\t</div>\n\t\t);\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \n\t\t\ttype=\"search\" \n\t\t\tplaceholder=\"procure robôs!\" \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t\t\t{props.children}\n\t\t\t </div>\n\t\t);\n\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport './RobotForm.css';\n\nclass RobotForm extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinputFormName: '',\n\t\t\tinputFormUsername: '',\n\t\t\tinputFormEmail: ''\n\t\t}\n\n\t}\n\n\n\thandleChangeName = (event) => {\n\t\tthis.setState({inputFormName: event.target.value});\n\t};\n\n\n\thandleChangeUsername = (event) => {\n\t\tthis.setState({inputFormUsername: event.target.value});\n\t};\n\n\n\thandleChangeEmail = (event) => {\n\t\tthis.setState({inputFormEmail: event.target.value});\n\t};\n\n\n\trender(props) {\n\t\t\n\t\tconst handleSubmit = (event) => {\n\t\t\tthis.props.onSubmit(event);\n\t\t\tthis.setState({\n\t\t\t\tinputFormName: '',\n\t\t\t\tinputFormUsername: '',\n\t\t\t\tinputFormEmail: ''\n\t\t\t});\n\t\t};\n\n\t\treturn (\n\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tName:\n\t\t\t\t\t\t<input type=\"text\" name=\"name\" value={this.state.inputFormName} onChange={this.handleChangeName} className=\"pa1 ma3 ba b--green bg-lightest-blue\" required/>\n\t\t\t\t\t</label>\n\n\t\t\t\t\t<label>\n\t\t\t\t\t\tUsername:\n\t\t\t\t\t\t<input type=\"text\" name=\"username\" value={this.state.inputFormUsername} onChange={this.handleChangeUsername} className=\"pa1 ma3 ba b--green bg-lightest-blue\" required/>\n\t\t\t\t\t</label>\n\n\n\t\t\t\t\t<label>\n\t\t\t\t\t\tE-mail:\n\t\t\t\t\t\t<input type=\"email\" name=\"email\" value={this.state.inputFormEmail} onChange={this.handleChangeEmail} className=\"pa1 ma3 ba b--green bg-lightest-blue\" required/>\n\t\t\t\t\t</label>\n\n\t\t\t\t\t<input type=\"submit\" value=\"Criar robô!\" className=\"b ph3 pv2 input-reset ba b--black bg-lightest-blue grow pointer f6 dib\" required/>\n\n\t\t\t\t</form>\n\n\t\t\t);\n\t}\n}\n\nexport default RobotForm;","export const robots = [\n\t\n\t{\n\t\tid: 1,\n\t\tname: 'Thiago Fraxe',\n\t\tusername: 'tfraxe',\n\t\temail: 'tfraxe@gmail.com'\n\t},\n\n\n\t{\n\t\tid: 2,\n\t\tname: 'Sara Ingrid',\n\t\tusername: 'saraiab',\n\t\temail: 'saraiab@gmail.com'\n\t},\n\n\n\t{\n\t\tid: 3, \n\t\tname: 'Marcelo Pessoa',\n\t\tusername: 'mapes',\n\t\temail: 'mapes@gmail.com'\n\t},\n\n\t{\n\t\tid: 4,\n\t\tname: 'Jucurunga Jiribunda',\n\t\tusername: 'jacu',\n\t\temail: 'jacu@gmail.com'\n\t},\n\n\t{\n\t\tid: 5, \n\t\tname: 'Danosor Diniseu',\n\t\tusername: 'dandi',\n\t\temail: 'dandi@gmail.com'\n\t},\n\n\t{\n\t\tid: 6,\n\t\tname: 'Silmara Correia',\n\t\tusername: 'mara',\n\t\temail: 'maramaravilha@gmail.com'\n\t}\n\t\n\n\n];","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport RobotForm from '../components/RobotForm';\nimport { robots } from '../components/robots';\nimport './App.css';\n\nclass App extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t}\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchField: event.target.value})\n\t};\n\n\thandleSubmit = (event) => {\n\t\tconst new_robot = {\n\t\t\tid: 1,\n\t\t\tname: event.target[0].value,\n\t\t\tusername: event.target[1].value,\n\t\t\temail: event.target[2].value\n\t\t};\n\n\t\tconsole.log(new_robot);\n\n\t\tthis.setState({robots: this.state.robots.concat([new_robot])})\n\n\t\tevent.preventDefault();\n\t};\n\n\trender() {\n\t\tconst robosFiltrados = this.state.robots.filter( elem => elem.name.toLowerCase().includes(this.state.searchField.toLowerCase()) );\n\t\tif(this.state.robots.length === 0) {\n\t\t\treturn <h1> LOADING ... </h1>\n\t\t}\n\t\telse {\n\t\t\treturn ( \n\t\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\"> Robamigo </h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={robosFiltrados}/> \n\t\t\t\t</Scroll>\n\n\t\t\t\t<RobotForm onSubmit={this.handleSubmit}/>\n\t\t\t\t</div>\n\t\t\t);\t\t\n\t\t}\n\t\t\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then( response => {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users => {\n\t\t\tthis.setState({robots: robots.concat(users)});\n\t\t})\n\t}\n\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'; //engine \nimport ReactDOM from 'react-dom'; // engine is doing dom manipulation. we are rendering to a webpage. ReactNative renders to mobile.\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <div>\n  \t<App />\n  </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}